day 2018-09-10


using System;   //using 关键字用于在程序中包含 System 命名空间

namespace ZbyApplication    //namespace 声明 ZbyApplication命名空间包含类 ZbyClass
{
    class ZbyClass      //class声明
     {
         static void Main()     //Main方法 C#程序入口 Main方法说明当执行时 类将做什么动作
         {
             Console.WriteLine("你好 卓本涌");   //WriteLine 在屏幕上输出
             Console.ReadKey();     //任意键结束
         }
     }
 }
 
 -------------------
 using System;
 
 namespace ZbyApplication
 {
     class Zby
     {
         private double width;
         private double height;
 
         public void init()
         {
             width = 20;
             height = 50;
         }
 
         public double area()
         {
             return width*height;
         }
     
         public double length()
         {
             return 2*(width+height);
         }
 
         public void show()
         {
             Console.WriteLine( area() );
             Console.WriteLine( length() );
         }
     }
 
     class RunClass
     {
         static void Main()
         {
             Zby obj = new Zby();
             obj.init();
             obj.show();
         }
     }
     
 }
 ----------------------------
 值类型
 bool 布尔值
 byte 字节 [baɪt] 8位无符号整数 0~255
 char [tʃɑ:(r)] 16位Unicode字符
 decimal [ˈdesɪml]  128 位精确的十进制值
 double [ˈdʌbl] 64 位双精度浮点型
 float  [fləʊt] 32 位单精度浮点型  float赋值右边默认为double，需要加F转化 例如 float a = 3.14F
 int 32 位有符号整数类型
 long 64 位有符号整数类型
 sbyte 8 位有符号整数类型 -128到127
 short [ʃɔ:t] 16 位有符号整数类型
 uint 32 位无符号整数类型
 ulong  64 位无符号整数类型
 ushort 16 位无符号整数类型 0 到 65,535
 
 变量
 整数类型	sbyte、byte、short、ushort、int、uint、long、ulong 和 char
 浮点型	    float 和 double
 十进制类型	decimal
 布尔类型	true 或 false 值，指定的值
 空类型	    可为空值的数据类型
 ----------------------------
 引用类型
 对象（Object）类型 (基类)
 object obj;
 
 动态（Dynamic）类型
 dynamic d = 20;
 
 引用类型和动态类型的区别 引用类型编译时检测变量 动态类型运行时检测

 字符串（String）类型
 String str = "runoob.com";
 @"runoob.com"; //可对字符串转义 字符串中可任意换行空格

 C#方法
 sizeof()   //返回值类型存储尺寸 sizeof(int) => 4 
 
 指针类型（Pointer types）
 char* cptr;
 int* iptr;
 
 
 ----------------------------
 类型转换
 
 隐式类型转换
 Convert.ToBoolean(1)   整数转bool值
 
 ToBoolean //如果可能的话，把类型转换为布尔型。
 ToByte //把类型转换为字节类型。
 ToChar //如果可能的话，把类型转换为单个 Unicode 字符类型。
 ToDateTime //把类型（整数或字符串类型）转换为 日期-时间 结构。
 ToDecimal  //把浮点型或整数类型转换为十进制类型。
 ToDouble   //把类型转换为双精度浮点型。
 ToInt16    //把类型转换为 16 位整数类型。
 ToInt32    //把类型转换为 32 位整数类型。
 ToInt64    //把类型转换为 64 位整数类型。
 ToSbyte    //把类型转换为有符号字节类型。
 ToSingle   //把类型转换为小浮点数类型。
 ToString   //把类型转换为字符串类型。
 ToType     //把类型转换为指定类型。
 ToUInt16   //把类型转换为 16 位无符号整数类型。
 ToUInt32   //把类型转换为 32 位无符号整数类型。
 ToUInt64   //把类型转换为 64 位无符号整数类型。
 
 
 
 显式类型转换(强制类型转换)
 double a = 3.14;
 a = (int) a;
 
 变量
 C# 中的 Lvalues 和 Rvalues
 lvalue 表达式可以出现在赋值语句的左边或右边。
 rvalue 表达式可以出现在赋值语句的右边，不能出现在赋值语句的左边。
 
 C# 常量
 const <data_type> <constant_name> = value;
 const double pi = 3.14
 
 
 using System;
 
 namespace ZbyApplication
 {
     class Zby
     {
         public int a = 1;    //初始化
         public int b;    //构造函数中初始化
 
         private const int Z = 666;    //声明常量
 
         Zby()    //构造函数
         {
             b = 2;
         }
 
         static void Main()
         {
             int c;
             
             Zby obj = new Zby();
             
             c = obj.a + obj.b + Z;
             
             Console.WriteLine(c);
         }
     }
 }
 
 
 C# 封装
 public：所有对象都可以访问；
 private：对象本身在对象内部可以访问；
 protected：只有该类对象及其子类对象可以访问
 internal：同一个程序集的对象可以访问；
 protected internal：访问限于当前程序集或派生自包含类的类型。
 
 C# 方法

 引用传递 关键字 ref       需要初始化赋值后带入函数
 public void fn1( ref int a ){
    ...
 }
 
 按输出传递参数 关键字 out    只需要定义 不需要赋值即可传入函数
 
 ref 和 out 的区别 ref有进有出  out只出不进
 
 C# 可空类型（Nullable）
 int? a = null;
 int? b = 100;
 double? c = null;
 double d = 123;
 bool? e = new bool?();
 
 Null 合并运算符（ ?? ）
 double f = a ?? 3.14; 如果a为空 这返回3.14
 
 
 C# 数组（Array）
 datatype[] arrayName;
 datatype 元素类型
 [] 数组纬度
 arrayName 数组名称
 
 初始化数组 int [] attr = new int[10];
 
 数组赋值
 balance[0] = 4500.0;
 int [] marks = new int[5]  { 99,  98, 92, 97, 95};
 int [] marks = new int[]  { 99,  98, 92, 97, 95};

 int[] score = marks;
 
 占位输出
 Console.WriteLine("Element[{0}] = {1}", j, n[j]);
 
 
 
 
 
 